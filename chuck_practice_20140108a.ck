SndBuf buff;
BPF phil[10];

me.dir() + "/audio/Sample3.wav" => buff.read;


[29,61,115,218,411,777,1500,2800,5200,11000] @=> int philFreq[];

[
[1.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.5],
[0.75,0.75,0.0,0.0,0.0,0.0,0.0,0.0,0.75,0.75],
[0.5,0.5,0.5,0.0,0.0,0.0,0.0,0.5,0.5,0.5],
[0.375,0.375,0.375,0.375,0.0,0.0,0.375,0.375,0.375,0.375],
[0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3],
[0.0,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.0],
[0.0,0.0,0.5,0.5,0.5,0.5,0.5,0.5,0.0,0.0],
[0.0,0.0,0.0,0.75,0.75,0.75,0.75,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,1.5,1.5,0.0,0.0,0.0,0.0],
[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
] @=> float philGain[][];

[0,1,2,3,
2,3,4,5,
4,5,6,7,
6,7,8,
8,7,6,
7,6,5,4,
5,4,3,2,
3,2,1,0,
9] @=> int philStep[];

for (0 => int i; i < phil.cap(); i++){
  buff => phil[i];
  phil[i] => dac;
  philFreq[i] => phil[i].freq;
  1 => phil[i].Q;
}

repeat(10){
  for (0=> int j; j < philStep.cap(); j++){
    for (0 => int i; i < phil.cap(); i++){
      philGain[philStep[j]][i] => phil[i].gain;
    }
    0 => buff.pos;
    0.1::second => now;
  }
}
