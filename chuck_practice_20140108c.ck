SndBuf buff;
JCRev jc => dac;
0.2 => jc.mix;

me.dir() + "/audio/Sample2.wav" => buff.read;
BPF phil[10];
[29,61,115,218,411,777,1500,2800,5200,11000] @=> int philFreq[];

[
  [1.5  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,1.5  ],
  [0.75 ,0.75 ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.75 ,0.75 ],
  [0.5  ,0.5  ,0.5  ,0.0  ,0.0  ,0.0  ,0.0  ,0.5  ,0.5  ,0.5  ],
  [0.375,0.375,0.375,0.375,0.0  ,0.0  ,0.375,0.375,0.375,0.375],
  [0.3  ,0.3  ,0.3  ,0.3  ,0.3  ,0.3  ,0.3  ,0.3  ,0.3  ,0.3  ],
  [0.0  ,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.375,0.0  ],
  [0.0  ,0.0  ,0.5  ,0.5  ,0.5  ,0.5  ,0.5  ,0.5  ,0.0  ,0.0  ],
  [0.0  ,0.0  ,0.0  ,0.75 ,0.75 ,0.75 ,0.75 ,0.0  ,0.0  ,0.0  ],
  [0.0  ,0.0  ,0.0  ,0.0  ,1.5  ,1.5  ,0.0  ,0.0  ,0.0  ,0.0  ],
  [0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ,0.0  ]
] @=> float philGain[][];

[0,1,2,3,
2,3,4,5,
4,5,6,7,
6,7,8,
8,7,6,
7,6,5,4,
5,4,3,2,
3,2,1,0,
9] @=> int philStep[];

[0,10000,0,30000,0,10000,0,30000,0,10000,0] @=> int filePosition[];

for (0 => int i; i < phil.cap(); i++){
  buff => phil[i];
  phil[i] => jc;
  philFreq[i] => phil[i].freq;
  1 => phil[i].Q;
}

for (0 => int k ; k <= 10; k++){
  for (0=> int j; j < philStep.cap(); j++){
    for (0 => int i; i < phil.cap(); i++){
      philGain[philStep[j]][i] => phil[i].gain;
    }
    filePosition[k] => buff.pos;
    0.1::second => now;
 }
}

6::second => now;
